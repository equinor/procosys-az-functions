trigger:
  paths:
    include:
      - commissioning-webapp/*

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'procosys - github'

# Global variables for the pipeline
variables:
  - template: templates/variables/procosys-global-variables.yml@templates
  - template: templates/variables/comm-webapp-variables.yml@templates

  - name: 'repositoryName'
    value: func/cwa

stages:
# Build Stage
- stage: build
  displayName: 'Build'
  variables:
    envName: 'build'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerfilePath: 'commissioning-webapp/CommFunctionApp/Dockerfile'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  jobs:
  # Docker Build
  - template: /templates/pipelines/dockerbuild-cwa.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build'
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      buildCommand: build
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/commissioning-webapp/'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  # Docker Build and Push
  - template: /templates/pipelines/dockerbuild-cwa.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build_push'
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      buildCommand: buildAndPush
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/commissioning-webapp/'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

# # Deploy to Dev
# - stage: dev
#   displayName: 'Deploy to Dev'
#   dependsOn: 'build'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
#   variables:
#     envName: 'dev'
#     envLabel: 'non-prod'
#     envRg: '${{ variables.envRgName }}'
#     envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
#     serviceConnection: '${{ variables.nonProdServiceConnection }}'
#     containerRegistry: '${{ variables.containerRegistryName }}'

#   jobs:
#   # Deploy Function App
#   - template: /templates/pipelines/function-cwa-release.yml@templates
#     parameters:
#       dependsOn: ''
#       deploymentName: 'publish'
#       serviceConnection: '${{ variables.serviceConnection }}'
#       functionApp: '$(globalPrefix)-$(fullAppName)-dev-func'
#       envGroup: '${{ variables.envGroupName }}'
#       rgName: '${{ variables.envRg }}'
#       repository: ${{ variables.repositoryName }}
#       containerRegistry: '${{ variables.containerRegistry }}'
#       keyVaultUrl: '${{ variables.kvName }}'