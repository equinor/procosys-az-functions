trigger:
  branches:
    include:
      - main

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
- template: templates/variables/procosys-global-variables.yml@templates
- template: templates/variables/indexupdate-variables.yml@templates

- name: 'repositoryName'
  value: 'indexupdate'

stages:
# Build stage. Docker build, tag and push
- stage: 'Build'
  displayName: 'Build'
  dependsOn: ''
  variables:
    envName: 'build'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-indexupdate-${{ variables.envName }}'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/ProCoSys.IndexUpdate/Dockerfile'

  jobs:
  # Docker Build Not Main
  - template: /templates/pipelines/dockerbuild-indexupdate.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: build
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src/ProCoSys.IndexUpdate'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  # Docker Build Main
  - template: /templates/pipelines/dockerbuild-indexupdate.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build_push'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: buildAndPush
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src/ProCoSys.IndexUpdate'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

# Release stage Dev
- stage: 'Dev'
  displayName: 'Release Dev'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    envName: 'dev'
    envLabel: 'non-prod'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-indexupdate-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 

  jobs:
  # Release to Function App
  - template: /templates/pipelines/indexupdate-release.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'release_to_function_app'
      serviceConnection: '${{ variables.serviceConnection }}'
      rgName: '${{ variables.envRg }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:$(Build.BuildId)'
      functionApp: '${{ variables.functionAppName }}'
      kvUri: '${{ variables.kvUriName }}'
      aspNetCoreEnvironment: 'Development'

# Release stage Test
- stage: 'Test'
  displayName: 'Release Test'
  dependsOn: 'Dev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    envName: 'test'
    envLabel: 'non-prod'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-indexupdate-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 

  jobs:
  # Release to Function App
  - template: /templates/pipelines/indexupdate-release.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'release_to_function_app'
      serviceConnection: '${{ variables.serviceConnection }}'
      rgName: '${{ variables.envRg }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:$(Build.BuildId)'
      functionApp: '${{ variables.functionAppName }}'
      kvUri: '${{ variables.kvUriName }}'
      aspNetCoreEnvironment: 'Test'

# Release stage Prod
- stage: 'Prod'
  displayName: 'Release Prod'
  dependsOn: 'Test'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    envName: 'prod'
    envLabel: 'prod'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-indexupdate-${{ variables.envName }}'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 

  jobs:
  # Release to Function App
  - template: /templates/pipelines/indexupdate-release.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'release_to_function_app'
      serviceConnection: '${{ variables.serviceConnection }}'
      rgName: '${{ variables.envRg }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:$(Build.BuildId)'
      functionApp: '${{ variables.functionAppName }}'
      kvUri: '${{ variables.kvUriName }}'
      aspNetCoreEnvironment: 'Prod'